#!/bin/bash
# CAUTION: Do not edit this file.
# this script is generated by consul-template

LOGGER=$(basename -s .sh $0)
. /usr/lib/chip-in/functions.sh

function load () {
  HOSTNAME=$(hostname)
  NEED_RELOAD_NGINX=false
  NEED_RELOAD_SHIBBOLETH=false
  WORKDIR=/tmp/chip-in-configure-$$
  mkdir -p $WORKDIR
  message "Start install Certificates"
  message "Clear old certificates and keys"
  /bin/rm -f /var/chip-in/certs/*.crt /var/chip-in/private/*.key
{{- range ls "certificates"}}{{$certificate := .Value | parseJSON}}
  message "Install certificate for {{$certificate.fqdn}} into /var/chip-in/certs/{{$certificate.fqdn}}.crt"
  upload /var/chip-in/certs/{{$certificate.fqdn}}.crt nginx << __EOF
{{$certificate.cerificate}}
__EOF
  message "Install private key for {{$certificate.fqdn}} into /var/chip-in/private/{{$certificate.fqdn}}.key"
  upload /var/chip-in/private/{{$certificate.fqdn}}.key nginx << __EOF
{{$certificate.privateKey}}
__EOF
{{- end}}
  if [ -f /var/chip-in/private/${HOSTNAME}.key ]; then
    message "Certificate for $HOSTNAME is found, so setup ssl."
    upload /etc/nginx/conf.d/ssl.conf.server nginx << __EOF
listen 443 ssl;
ssl_certificate /var/chip-in/certs/${HOSTNAME}.crt;
ssl_certificate_key /var/chip-in/private/${HOSTNAME}.key;
ssl_session_cache shared:le_nginx_SSL:1m;
ssl_session_timeout 1440m;

ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;

ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
__EOF
  else
    message "Certificate for $HOSTNAME is not found, so clear old ssl settings."
    cleanup /etc/nginx/conf.d/ssl.conf.server nginx
  fi
{{- if keyExists "SamlSetting"}}
  {{- with $setting := key "SamlSetting" | .Value | parseJSON}}
  if [ ! -f /var/chip-in/private/${HOSTNAME}.key ]; then
    /bin/rm -rf $WORKDIR
    error "SamlSetting need certificate for $HOSTNAME"
  fi
  IDP_ENTITY_ID={{$setting.idpEntityId}}
  message "Download metadata for default IDP $IDP_ENTITY_ID into /etc/shibboleth/metadata/default.xml"
  base64 -d  << __EOF | upload /etc/shibboleth/metadata/default.xml shibboleth
{{base64Encode $setting.metadata}}
__EOF
  message "Setup Shibboleth SP (entityID="https://${HOSTNAME}/shibboleth")"
  upload /etc/shibboleth/shibboleth2.xml shibboleth << __EOF
<SPConfig xmlns="urn:mace:shibboleth:2.0:native:sp:config" xmlns:conf="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:am="urn:mace:shibboleth:2.0:attribute-map"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" clockSkew="180">
    <RequestMapper type="XML">
      <RequestMap applicationId="default">
        <Host name="${HOSTNAME}" applicationId="default"
                authType="shibboleth"
                requireSession="true">
        </Host>
      </RequestMap>
    </RequestMapper>
    <ApplicationDefaults entityID="https://${HOSTNAME}/shibboleth" REMOTE_USER="UID">
        <Errors supportContact="root@l${HOSTNAME}" helpLocation="/about.html"
            styleSheet="/shibboleth-sp/main.css"/>
        <MetadataProvider type="XML" validate="true" file="metadata/default.xml" />
        <AttributeExtractor type="XML" validate="true" >
          <am:Attributes>
            <am:Attribute name="UID" id="UID">
              <am:AttributeDecoder xsi:type="am:NameIDAttributeDecoder" formatter="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"/>
            </am:Attribute>
          </am:Attributes>
        </AttributeExtractor>
        <AttributeResolver type="Query" subjectMatch="true"/>
        <Sessions lifetime="28800" timeout="3600" relayState="ss:mem" checkAddress="true" handlerSSL="true" cookieProps="https">
            <SSO entityID="${IDP_ENTITY_ID}">
              SAML2 SAML1
            </SSO>
            <Logout>SAML2 Local</Logout>
        </Sessions>
        <CredentialResolver type="File" key="/var/chip-in/certs/${HOSTNAME}.crt" certificate="/var/chip-in/private/${HOSTNAME}.key"/>
    </ApplicationDefaults>
    <SecurityPolicyProvider type="XML" validate="true" path="security-policy.xml"/>
    <ProtocolProvider type="XML" validate="true" reloadChanges="false" path="protocols.xml"/>
</SPConfig>
__EOF
  message "Start generate metadata (entityID="https://${HOSTNAME}/shibboleth")"
  /etc/shibboleth/metagen.sh -2 -L -c /var/chip-in/certs/${HOSTNAME}.crt -h $HOSTANMEã€€> /usr/share/nginx/html/shibboleth
  message "Start Setup SAML authentication"
  upload /etc/nginx/conf.d/auth.conf.location nginx << '__EOF'
if ($http_authorization = "") {
  shib_request /shibauthorizer;
  shib_request_use_headers on;
  include shib_clear_headers;
} else {
  auth_basic "Restricted";
  auth_basic_user_file htpasswd;
}
__EOF
  upload /etc/nginx/conf.d/saml.conf.server nginx << '__EOF'
# FastCGI authorizer for Shibboleth Auth Request module
location = /shibauthorizer {
    internal;
    include fastcgi_params;
    fastcgi_pass unix:/var/run/shibboleth/shibauthorizer.sock;
}
#FastCGI responder
location /Shibboleth.sso {
    include fastcgi_params;
    fastcgi_pass unix:/var/run/shibboleth/shibresponder.sock;
}
#Resources for the Shibboleth error pages.
location /shibboleth-sp {
    alias /usr/share/shibboleth/;
}
__EOF
  {{- end}}
{{- end}}

  if $NEED_RELOAD_NGINX; then
    reloadNginx
  fi
  if $NEED_RELOAD_SHIBBOLETH; then
    reloadShibboleth
  fi
  /usr/bin/consul kv export > /etc/chip-in/kvs.json
  /bin/rm -rf $WORKDIR
}

load
